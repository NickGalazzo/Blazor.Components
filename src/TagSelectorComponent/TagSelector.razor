@using Microsoft.JSInterop

@typeparam TItem
@inject IJSRuntime JsRuntime

<div class="uic-tag-selector @Style.SelectorClass @(_selectionOpen ? "uic-tag-selector--open" : "")">
    <div class="uic-tag-selector__box">
        @if (SelectedTags != null)
        {
            foreach (var item in SelectedTags)
            {
                <span class="@Style.SelectedTagClass">
                    @TagTemplate(item)
                    <span class="@Style.RemoveTagClass" @onclick="@(() => RemoveSelectedTag(item))"></span>
                </span>
            }
        }
        <input type="text" @onfocus="@OpenSelection" @onblur="@CloseSelection" @onkeyup="@OnTextKeypress" @ref="TextBox" />
    </div>

    @if (_selectableItems.Any())
    {
        <div class="uic-tag-selector__dropdown @Style.DropdownClass">

            @foreach (var item in _selectableItems)
            {
                <div class="@Style.DropdownItemClass @(_selectableItems.IndexOf(item) == _selectableIndex ? "uic-tag-selector__item--selected " + Style.DropdownItemHoverClass : "")" @onmousedown="@(() => AddSelectedTag(item, true))">
                    @TagTemplate(item)
                </div>
            }

        </div>
    }
</div>

@code {

    [Parameter] IEnumerable<TItem> SelectableTags { get; set; }

    [Parameter] IList<TItem> SelectedTags { get; set; } = new List<TItem>();
    [Parameter] EventCallback<IList<TItem>> SelectedTagsChanged { get; set; }

    [Parameter] TagSelectorStyle Style { get; set; } = TagSelectorStyle.Bootstrap;

    [Parameter] RenderFragment<TItem> TagTemplate { get; set; }

    [Parameter] Func<TItem, string, bool> Filter { get; set; }

    [Parameter] EventCallback<TItem> OnTagSelected { get; set; }

    [Parameter] EventCallback<TItem> OnTagRemoved { get; set; }

    private bool _selectionOpen;
    private string _filterText;
    private ElementRef TextBox;
    private int _selectableIndex = 0;
    private IList<TItem> _selectableItems = new List<TItem>();

    private void AddSelectedTag(TItem item, bool closeSelection)
    {
        SelectedTags.Add(item);
        _filterText = "";
        UpdateSelectableItems();
        _selectionOpen = !closeSelection;
        JsRuntime.InvokeAsync<object>("tagSelectorComponent.setValue", TextBox, "");
        OnTagSelected.InvokeAsync(item);
        SelectedTagsChanged.InvokeAsync(SelectedTags);
    }

    private void RemoveSelectedTag(TItem item)
    {
        SelectedTags.Remove(item);
        OnTagRemoved.InvokeAsync(item);
        SelectedTagsChanged.InvokeAsync(SelectedTags);
    }

    private void OpenSelection()
    {
        UpdateSelectableItems();
        _selectableIndex = 0;
        _selectionOpen = true;
    }

    private void CloseSelection()
    {
        _selectionOpen = false;
    }

    private async Task OnTextKeypress(UIKeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowUp":
                _selectableIndex--;
                break;

            case "ArrowDown":
                _selectableIndex++;
                break;

            case "Enter":
                if (_selectableItems.Any())
                {
                    AddSelectedTag(_selectableItems[_selectableIndex], false);
                }
                break;

            case "Escape":
                await JsRuntime.InvokeAsync<object>("tagSelectorComponent.blur", TextBox);
                break;

            default:
                _filterText = await JsRuntime.InvokeAsync<string>("tagSelectorComponent.getValue", TextBox);
                UpdateSelectableItems();
                break;
        }

        // check selectable index bounds
        if (_selectableIndex < 0)
        {
            _selectableIndex = _selectableItems.Count - 1;
        }
        else if (_selectableIndex >= _selectableItems.Count)
        {
            _selectableIndex = 0;
        }
    }

    private void UpdateSelectableItems()
    {
        _selectableItems = (SelectableTags ?? _selectableItems)
            .Except(SelectedTags)
            .Where(item => Filter == null || string.IsNullOrEmpty(_filterText) || Filter(item, _filterText))
            .ToList();
    }

}
