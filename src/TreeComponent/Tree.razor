@using MW.Blazor

@typeparam TNode

<div class="uic-tree @(Visible ? "" : "uic-tree--hidden")">
    
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var nodeExpanded = ExpandedNodes.Contains(node);
        var nodeSelected = node.Equals(SelectedNode);
        var hasChilds = HasChildNodes(node);

        <div>
            
            @if (hasChilds)
            {
                <span class="uic-tree__icon" onclick="@(() => OnToggleNode(node, !nodeExpanded))">
                    <i class="@(nodeExpanded ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></i>
                </span>
            }

            <div class="uic-tree__title">
                <span class="@Style.NodeTitleClass @(nodeSelected ? Style.NodeTitleSelectedClass : "")" onclick="@(() => OnSelectNode(node))">
                    @TitleTemplate(node)
                </span>
            </div>

            @if (hasChilds)
            {
                <Tree 
                    Nodes="@ChildSelector(node)"
                    TitleTemplate="@TitleTemplate" 
                    ChildSelector="@ChildSelector"
                    ExpandedNodes="@ExpandedNodes"
                    ExpandedNodesChanged="@ExpandedNodesChanged"
                    SelectedNode="@SelectedNode"
                    SelectedNodeChanged="@SelectedNodeChanged"
                    Visible="@nodeExpanded"
                    HasChildNodes="@HasChildNodes" />
            }
            
        </div>
    }

</div>

@functions {

    [Parameter] IEnumerable<TNode> Nodes { get; set; }

    [Parameter] RenderFragment<TNode> TitleTemplate { get; set; }

    [Parameter] TNode SelectedNode { get; set; }
    [Parameter] EventCallback<TNode> SelectedNodeChanged { get; set; }

    [Parameter] Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter] IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();
    [Parameter] EventCallback<IList<TNode>> ExpandedNodesChanged { get; set; }

    [Parameter] TreeStyle Style { get; set; } = TreeStyle.Bootstrap;

    [Parameter] bool Visible { get; set; } = true;

    [Parameter] Func<TNode, bool> HasChildNodes { get; set; } = node => true;

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if (expanded && !expand)
        {
            ExpandedNodes.Remove(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
        else if (!expanded && expand)
        {
            ExpandedNodes.Add(node);
            ExpandedNodesChanged.InvokeAsync(ExpandedNodes);
        }
    }

    private void OnSelectNode(TNode node)
    {
        SelectedNode = node;
        SelectedNodeChanged.InvokeAsync(node);
    }

}