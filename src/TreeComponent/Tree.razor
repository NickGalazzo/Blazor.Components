
@typeparam TNode

<div class="uic-tree @(Visible ? "" : "uic-tree--hidden")">
    
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var nodeExpanded = ExpandedNodes.Contains(node);
        var nodeSelected = SelectedNodes.Contains(node);
        var hasChilds = HasChildNodes(node);

        <div>
            
            @if (hasChilds)
            {
                <span class="uic-tree__icon" onclick="@(() => OnToggleNode(node, !nodeExpanded))">
                    <i class="@(nodeExpanded ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></i>
                </span>
            }

            <div class="uic-tree__title">
                <span class="@Style.NodeTitleClass @(nodeSelected ? Style.NodeTitleSelectedClass : "")" onclick="@(() => OnSelectNode(node))">
                    @TitleTemplate(node)
                </span>
            </div>

            @if (hasChilds)
            {
                <Tree 
                    Nodes="@ChildSelector(node)"
                    TitleTemplate="@TitleTemplate" 
                    ChildSelector="@ChildSelector"
                    ExpandedNodes="@ExpandedNodes"
                    OnNodeSelected="@OnChildNodeSelected"
                    SelectedNodes="@SelectedNodes"
                    Visible="@nodeExpanded"
                    HasChildNodes="@HasChildNodes" />
            }
            
        </div>
    }

</div>

@functions {

    [Parameter] IEnumerable<TNode> Nodes { get; set; }

    [Parameter] RenderFragment<TNode> TitleTemplate { get; set; }

    [Parameter] IList<TNode> SelectedNodes { get; set; } = new List<TNode>();

    [Parameter] Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter] IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();

    [Parameter] Func<TNode, Task> OnNodeSelected { get; set; }

    [Parameter] TreeStyle Style { get; set; } = TreeStyle.Bootstrap;

    [Parameter] bool Visible { get; set; } = true;

    [Parameter] Func<TNode, bool> HasChildNodes { get; set; } = node => true;

    private void OnToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if (expanded && !expand)
        {
            ExpandedNodes.Remove(node);
        }
        else if (!expanded && expand)
        {
            ExpandedNodes.Add(node);
        }
    }

    private async Task OnSelectNode(TNode node)
    {
        SelectedNodes.Clear();
        SelectedNodes.Add(node);

        await OnNodeSelected?.Invoke(node);
    }

    private async Task OnChildNodeSelected(TNode item)
    {
        StateHasChanged();

        await OnNodeSelected?.Invoke(item);
    }

}