
@typeparam TNode

<div class="uic-tree" style="display:@(Visible ? "block" : "none")">
    
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        var nodeExpanded = ExpandedNodes.Contains(node);
        var nodeSelected = SelectedNodes.Contains(node);
        
        <div>
            <span onclick=@(() => ToggleNode(node, !nodeExpanded))><i class="@(nodeExpanded ? Style.CollapseNodeIconClass : Style.ExpandNodeIconClass)"></i></span>
            
            <span class="@Style.NodeTitleClass @(nodeSelected ? Style.NodeTitleSelectedClass : "")" onclick=@(async () => await OnTitleClick(node))>
                @TitleTemplate(node)
            </span>

            <Tree 
                Nodes=@ChildSelector(node) 
                TitleTemplate=@TitleTemplate 
                ChildSelector=@ChildSelector
                ExpandedNodes=@ExpandedNodes
                OnNodeSelected=@OnChildNodeSelected
                SelectedNodes=@SelectedNodes
                Visible=@nodeExpanded>
            </Tree>
            
        </div>
    }

</div>

@functions {

    [Parameter] IEnumerable<TNode> Nodes { get; set; }

    [Parameter] RenderFragment<TNode> TitleTemplate { get; set; }

    [Parameter] IList<TNode> SelectedNodes { get; set; }

    [Parameter] Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter] IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();

    [Parameter] Func<TNode, Task> OnNodeSelected { get; set; }

    [Parameter] TreeStyle Style { get; set; } = TreeStyle.Bootstrap;

    [Parameter] bool Visible { get; set; } = true;

    public void ToggleNode(TNode node, bool expand)
    {
        var expanded = ExpandedNodes.Contains(node);

        if (expanded && !expand)
        {
            ExpandedNodes.Remove(node);
        }
        else if (!expanded && expand)
        {
            ExpandedNodes.Add(node);
        }
    }

    private async Task OnTitleClick(TNode node)
    {
        SelectedNodes.Clear();
        SelectedNodes.Add(node);


        await OnNodeSelected?.Invoke(node);

    }

    private async Task OnChildNodeSelected(TNode item)
    {
        StateHasChanged();

        await OnNodeSelected?.Invoke(item);
    }

}