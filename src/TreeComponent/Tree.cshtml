
@typeparam TNode

<div class="">
    
    @foreach (var node in Nodes ?? Enumerable.Empty<TNode>())
    {
        <div>
            <span onclick=@(() => OnTitleClick(node))>
                @ItemTemplate(node)
            </span>
            @if (ExpandedNodes.Contains(node))
            {
                <Tree 
                    Nodes=@ChildSelector(node) 
                    ItemTemplate=@ItemTemplate 
                    ChildSelector=@ChildSelector
                    ExpandedNodes=@ExpandedNodes>
                </Tree>
            }
        </div>
    }

</div>

@functions {

    [Parameter] IEnumerable<TNode> Nodes { get; set; }

    [Parameter] RenderFragment<TNode> ItemTemplate { get; set; }

    [Parameter] Func<TNode, IEnumerable<TNode>> ChildSelector { get; set; }

    [Parameter] IList<TNode> ExpandedNodes { get; set; } = new List<TNode>();

    private void OnTitleClick(TNode node)
    {
        if (ExpandedNodes.Contains(node))
        {
            ExpandedNodes.Remove(node);
        }
        else
        {
            ExpandedNodes.Add(node);
        }
    }

}